import streamlit as st
from src.database.queries import get_segment_statistics, save_segment
import uuid

try:
    from src.components.react_segment_builder import render_react_segment_builder
    REACT_AVAILABLE = True
except ImportError:
    REACT_AVAILABLE = False

try:
    from src.components.blockly_segment_builder import render_blockly_segment_builder
    BLOCKLY_AVAILABLE = True
except ImportError:
    BLOCKLY_AVAILABLE = False

try:
    from src.components.visual_query_builder import render_visual_query_builder
    VISUAL_AVAILABLE = True
except ImportError:
    VISUAL_AVAILABLE = False

def render_segment_builder(config):
    """Render the main segment builder interface"""
    
    # Reduce gap between sections with custom styling
    st.markdown("""
    <style>
    /* Reduce vertical spacing */
    .block-container {
        padding-top: 1rem !important;
        padding-bottom: 1rem !important;
    }
    
    /* Reduce gap between elements */
    .element-container {
        margin-bottom: 0.5rem !important;
    }
    
    /* Tooltip styling */
    .tooltip {
        position: relative;
        display: inline-block;
        cursor: help;
    }
    
    .tooltip .tooltiptext {
        visibility: hidden;
        width: 200px;
        background-color: #FFFFFF;
        color: #2C2C2C;
        text-align: center;
        border: 1px solid #E1E1E1;
        border-radius: 6px;
        padding: 8px;
        position: absolute;
        z-index: 1;
        bottom: 125%;
        left: 50%;
        margin-left: -100px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        font-size: 12px;
        font-weight: normal;
    }
    
    .tooltip:hover .tooltiptext {
        visibility: visible;
    }
    
    .tooltip .tooltiptext::after {
        content: "";
        position: absolute;
        top: 100%;
        left: 50%;
        margin-left: -5px;
        border-width: 5px;
        border-style: solid;
        border-color: #FFFFFF transparent transparent transparent;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Segment header section - tighter layout
    col1, col2 = st.columns([3, 1])
    
    with col1:
        # Title and Description with reduced spacing
        st.session_state.segment_definition['name'] = st.text_input(
            "Title *", 
            value=st.session_state.segment_definition['name'],
            placeholder="Enter segment name",
            help="Give your segment a descriptive name"
        )
        
        st.session_state.segment_definition['description'] = st.text_area(
            "Description",
            value=st.session_state.segment_definition['description'],
            placeholder="Enter a description for this segment",
            height=60,  # Reduced height
            help="Describe what this segment captures"
        )
    
    with col2:
        # Segment visualization with better alignment
        render_segment_visualization()
    
    # Definition section - reduced margin
    st.markdown("<h3 style='margin-top: 0.5rem; margin-bottom: 0.5rem;'>Definition *</h3>", unsafe_allow_html=True)
    
    # UI Mode Selector - Show all options with Visual Builder as default
    col1, col2 = st.columns([3, 1])
    with col1:
        # Build list of available UI modes
        ui_modes = []
        ui_descriptions = {}
        
        # Always add Visual Query Builder first (if available) as it's the best
        if VISUAL_AVAILABLE:
            ui_modes.append("Visual Query Builder")
            ui_descriptions["Visual Query Builder"] = "Recommended - Clean, intuitive interface with dropdowns"
        
        # Add other options
        if REACT_AVAILABLE:
            ui_modes.append("Drag & Drop Builder")
            ui_descriptions["Drag & Drop Builder"] = "Adobe Analytics style drag-and-drop interface"
        
        if BLOCKLY_AVAILABLE:
            ui_modes.append("Visual Blocks (Blockly)")
            ui_descriptions["Visual Blocks (Blockly)"] = "Visual programming with connecting blocks"
        
        # Always add Standard as fallback
        ui_modes.append("Standard Builder")
        ui_descriptions["Standard Builder"] = "Simple form-based interface"
        
        # Select UI mode with description
        selected_ui = st.selectbox(
            "Choose Builder Interface",
            options=ui_modes,
            index=0,  # Default to first option (Visual Query Builder if available)
            format_func=lambda x: f"{x} - {ui_descriptions.get(x, '')}",
            help="Select your preferred interface for building segments. Visual Query Builder is recommended for most users."
        )
    
    with col2:
        # Info about selected UI
        if selected_ui == "Visual Query Builder":
            st.info("‚ú® Best for most users")
        elif selected_ui == "Drag & Drop Builder":
            st.info("üéØ Like Adobe Analytics")
        elif selected_ui == "Visual Blocks (Blockly)":
            st.info("üß© Visual programming")
        else:
            st.info("üìù Simple & reliable")
    
    # Render the selected UI
    st.markdown("---")
    
    if selected_ui == "Visual Query Builder" and VISUAL_AVAILABLE:
        # Visual Query Builder - The recommended option
        st.markdown("üé® **Visual Query Builder** - Build segments with an intuitive visual interface")
        render_visual_query_builder(config, st.session_state.segment_definition)
        
    elif selected_ui == "Drag & Drop Builder" and REACT_AVAILABLE:
        # React Drag & Drop Builder
        st.markdown("üéØ **Drag & Drop Builder** - Drag components from the sidebar to build segments")
        render_react_segment_builder(config, st.session_state.segment_definition)
        
    elif selected_ui == "Visual Blocks (Blockly)" and BLOCKLY_AVAILABLE:
        # Blockly Visual Blocks
        st.markdown("üß© **Visual Blocks** - Connect blocks visually to create segment logic")
        render_blockly_segment_builder(config, st.session_state.segment_definition)
        
    else:
        # Standard Streamlit Builder (fallback)
        st.markdown("üìù **Standard Builder** - Simple form-based segment creation")
        render_standard_builder(config)
    
    # Save/Cancel buttons - Always visible regardless of UI mode
    st.markdown("<hr style='margin: 1rem 0;'>", unsafe_allow_html=True)
    st.markdown("<p style='font-size: 12px; color: #6E6E6E;'>* All fields with an asterisk are required in order to save.</p>", unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns([3, 1, 1])
    
    with col2:
        if st.button("Cancel", key="cancel_btn"):
            reset_segment()
    
    with col3:
        if st.button("Save", key="save_btn", type="primary"):
            if validate_and_save_segment():
                st.success("Segment saved successfully!")
                st.balloons()

def render_standard_builder(config):
    """Render the standard Streamlit-based builder"""
    # Container type selector
    col1, col2 = st.columns([2, 4])
    
    with col1:
        st.markdown("**Show**")
        container_type = st.selectbox(
            "Container Type",
            options=['hit', 'visit', 'visitor'],
            format_func=lambda x: get_container_display_name(x, config),
            key="main_container_type",
            label_visibility="collapsed"
        )
        st.session_state.segment_definition['container_type'] = container_type
    
    # Segment building area
    st.markdown("---")
    
    # Display existing containers or empty state
    if not st.session_state.segment_definition.get('containers'):
        # Empty state
        st.markdown("""
        <div style="background-color: #FAFAFA; border: 1px solid #E1E1E1; border-radius: 4px; padding: 40px; text-align: center; margin: 20px 0;">
            <p style="color: #6E6E6E; margin: 0; font-size: 14px;">
                Click the + button next to items in the left panel to add conditions<br>
                or click "Add Container" below to start building your segment
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        if st.button("‚ûï Add Container", key="add_first_container"):
            add_new_container()
    else:
        # Render existing containers
        for idx, container in enumerate(st.session_state.segment_definition['containers']):
            render_container(container, idx, config)
        
        if st.button("‚ûï Add Container", key="add_another_container"):
            add_new_container()

def render_segment_visualization():
    """Render the segment match visualization with tooltip"""
    stats = get_segment_statistics(st.session_state.segment_definition)
    
    # Calculate percentages
    total_visitors = stats.get('total_visitors', 1)
    total_sessions = stats.get('total_sessions', 1) 
    total_hits = stats.get('total_hits', 1)
    
    matched_visitors = stats.get('visitors', 0)
    matched_sessions = stats.get('sessions', 0)
    matched_hits = stats.get('hits', 0)
    
    visitor_percentage = int((matched_visitors / total_visitors * 100) if total_visitors > 0 else 0)
    
    # Create a visual representation with tooltip
    st.markdown("""
    <div style="text-align: center; padding: 5px;">
        <h4 style="margin: 0; color: #2C2C2C; font-weight: 500; font-size: 14px;">Segment Match</h4>
        <div class="tooltip" style="margin: 5px 0;">
            <div style="font-size: 32px; font-weight: bold; color: #1473E6;">
                {percentage}%
            </div>
            <span class="tooltiptext">
                This segment matches {percentage}% of total visitors<br>
                <hr style="margin: 4px 0; border-color: #E1E1E1;">
                <strong>Hits:</strong> {hits:,} of {total_hits:,}<br>
                <strong>Sessions:</strong> {sessions:,} of {total_sessions:,}<br>
                <strong>Visitors:</strong> {visitors:,} of {total_visitors:,}
            </span>
        </div>
        <div style="font-size: 11px; color: #6E6E6E;">
            of total visitors
        </div>
    </div>
    """.format(
        percentage=visitor_percentage,
        hits=matched_hits,
        total_hits=total_hits,
        sessions=matched_sessions,
        total_sessions=total_sessions,
        visitors=matched_visitors,
        total_visitors=total_visitors
    ), unsafe_allow_html=True)
    
    # Compact metrics display
    st.markdown("<div style='font-size: 12px; margin-top: 8px;'>", unsafe_allow_html=True)
    st.caption(f"Hits: {matched_hits:,}")
    st.caption(f"Sessions: {matched_sessions:,}")
    st.caption(f"Visitors: {matched_visitors:,}")
    st.markdown("</div>", unsafe_allow_html=True)

def render_container(container, idx, config):
    """Render a single container"""
    container_id = container.get('id', f"container_{idx}")
    
    with st.container():
        # Create a styled container
        st.markdown(f'<div class="segment-container">', unsafe_allow_html=True)
        
        col1, col2, col3 = st.columns([3, 3, 1])
        
        with col1:
            # Include/Exclude radio with colors
            st.markdown("""
            <style>
            .include-exclude-radio input[type="radio"]:checked + div {
                font-weight: 600;
            }
            .include-exclude-radio label:has(input[value="Include"]:checked) {
                color: #4CAF50 !important;
            }
            .include-exclude-radio label:has(input[value="Exclude"]:checked) {
                color: #F44336 !important;
            }
            </style>
            """, unsafe_allow_html=True)
            
            include_mode = st.radio(
                "Mode",
                options=["Include", "Exclude"],
                key=f"{container_id}_mode",
                index=0 if container.get('include', True) else 1,
                horizontal=True,
                label_visibility="collapsed"
            )
            container['include'] = (include_mode == "Include")
        
        with col2:
            # Container type selector
            new_type = st.selectbox(
                "Type",
                options=['hit', 'visit', 'visitor'],
                format_func=lambda x: get_container_display_name(x, config),
                key=f"{container_id}_type",
                index=['hit', 'visit', 'visitor'].index(container.get('type', 'hit')),
                label_visibility="collapsed"
            )
            container['type'] = new_type
        
        with col3:
            # Remove container button
            if st.button("‚úï", key=f"{container_id}_remove", help="Remove container"):
                st.session_state.segment_definition['containers'].pop(idx)
                st.rerun()
        
        # Conditions
        if container.get('conditions'):
            for cond_idx, condition in enumerate(container['conditions']):
                if cond_idx > 0:
                    # Logic operator
                    logic = st.selectbox(
                        "Logic",
                        options=['and', 'or', 'then'],
                        key=f"{container_id}_logic_{cond_idx}",
                        index=['and', 'or', 'then'].index(container.get('logic', 'and')),
                        label_visibility="collapsed"
                    )
                    container['logic'] = logic
                
                render_condition(condition, idx, cond_idx, config, container_id)
        else:
            st.info("Add conditions using the + button in the left panel")
        
        # Add rule button
        if st.button("‚ûï Add Rule", key=f"{container_id}_add_rule"):
            st.info("Select a dimension or metric from the left panel")
        
        st.markdown('</div>', unsafe_allow_html=True)

def render_condition(condition, container_idx, condition_idx, config, container_id):
    """Render a single condition"""
    col1, col2, col3, col4 = st.columns([3, 2, 2, 1])
    
    with col1:
        # Field display
        field_display = condition.get('name', 'Select field')
        field_type = "üìä" if condition.get('type') == 'dimension' else "üìà"
        st.markdown(f"{field_type} {field_display}")
    
    with col2:
        # Operator selector
        data_type = condition.get('data_type', 'string')
        operators = config['operators'].get(data_type, ['equals'])
        
        operator = st.selectbox(
            "Operator",
            options=operators,
            key=f"{container_id}_operator_{condition_idx}",
            index=operators.index(condition.get('operator', 'equals')),
            label_visibility="collapsed"
        )
        condition['operator'] = operator
    
    with col3:
        # Value input
        if operator not in ['exists', 'does not exist']:
            if data_type == 'number':
                value = st.number_input(
                    "Value",
                    key=f"{container_id}_value_{condition_idx}",
                    value=float(condition.get('value', 0)) if condition.get('value') else 0.0,
                    label_visibility="collapsed"
                )
            else:
                value = st.text_input(
                    "Value",
                    value=condition.get('value', ''),
                    placeholder="Enter Value",
                    key=f"{container_id}_value_{condition_idx}",
                    label_visibility="collapsed"
                )
            condition['value'] = value
    
    with col4:
        # Remove button
        if st.button("‚úï", key=f"{container_id}_remove_cond_{condition_idx}", help="Remove condition"):
            st.session_state.segment_definition['containers'][container_idx]['conditions'].pop(condition_idx)
            st.rerun()

def add_new_container():
    """Add a new container"""
    new_container = {
        'id': f'container_{uuid.uuid4().hex[:8]}',
        'type': 'hit',
        'include': True,
        'conditions': [],
        'logic': 'and'
    }
    
    if 'containers' not in st.session_state.segment_definition:
        st.session_state.segment_definition['containers'] = []
    
    st.session_state.segment_definition['containers'].append(new_container)
    st.rerun()

def get_container_display_name(container_type, config):
    """Get display name for container type"""
    for ct in config['container_types']:
        if ct['name'].lower() == container_type:
            return f"{ct['name']} ({ct['alias']})"
    return container_type.title()

def reset_segment():
    """Reset segment to initial state"""
    st.session_state.segment_definition = {
        'name': 'New Segment',
        'description': '',
        'container_type': 'visit',
        'containers': [],
        'logic': 'and'
    }
    st.rerun()

def validate_and_save_segment():
    """Validate and save the segment"""
    from src.utils.validators import validate_segment
    
    if validate_segment(st.session_state.segment_definition):
        # Save to database
        success, message = save_segment(st.session_state.segment_definition)
        if success:
            # Add to session saved segments
            if 'saved_segments' not in st.session_state:
                st.session_state.saved_segments = []
            st.session_state.saved_segments.append(st.session_state.segment_definition.copy())
            return True
        else:
            st.error(f"Failed to save: {message}")
            return False
    else:
        st.error("Please fill in all required fields and add at least one condition")
        return False
