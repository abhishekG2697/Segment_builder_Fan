import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from src.database.queries import execute_segment_query, get_db_connection
from src.utils.query_builder import build_sql_from_segment

def render_preview():
    """Render the preview panel showing segment results"""
    
    st.markdown("### 📊 Segment Preview")
    
    # Preview controls
    col1, col2, col3 = st.columns([2, 1, 1])
    
    with col1:
        date_range = st.date_input(
            "Date Range",
            value=(pd.Timestamp.now() - pd.Timedelta(days=30), pd.Timestamp.now()),
            key="preview_date_range"
        )
    
    with col2:
        sample_size = st.selectbox(
            "Sample Size",
            options=[100, 500, 1000, 5000, 10000, "All"],
            index=1,
            key="preview_sample_size"
        )
    
    with col3:
        if st.button("🔄 Refresh Preview", key="refresh_preview", type="primary"):
            generate_preview()
    
    # Show current segment definition
    with st.expander("Current Segment Definition", expanded=False):
        if st.session_state.segment_definition.get('containers'):
            st.json(st.session_state.segment_definition)
        else:
            st.info("No segment defined yet. Go to Segment Builder to create a segment.")
    
    # Check if we have a segment defined
    if not st.session_state.segment_definition.get('containers'):
        st.warning("Please define a segment in the Segment Builder tab first.")
        
        # Show sample data instead
        st.markdown("### Sample Data Preview")
        show_sample_data()
    else:
        # Generate preview if not exists
        if st.session_state.preview_data is None:
            generate_preview()
        
        # Preview results
        if st.session_state.preview_data is not None:
            render_preview_results()

def show_sample_data():
    """Show sample data when no segment is defined"""
    try:
        conn = get_db_connection()
        
        # Get sample hits
        sample_query = """
        SELECT h.*, u.user_type, s.total_revenue as session_revenue
        FROM hits h
        LEFT JOIN users u ON h.user_id = u.user_id
        LEFT JOIN sessions s ON h.session_id = s.session_id
        ORDER BY h.timestamp DESC
        LIMIT 1000
        """
        
        df = pd.read_sql_query(sample_query, conn)
        conn.close()
        
        if not df.empty:
            # Show metrics
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("Total Hits", f"{len(df):,}")
            with col2:
                st.metric("Unique Sessions", f"{df['session_id'].nunique():,}")
            with col3:
                st.metric("Unique Visitors", f"{df['user_id'].nunique():,}")
            with col4:
                avg_revenue = df['revenue'].mean()
                st.metric("Avg Revenue", f"${avg_revenue:.2f}")
            
            # Show data sample
            st.markdown("#### Data Sample")
            display_columns = ['timestamp', 'user_id', 'page_title', 'browser_name', 
                             'device_type', 'revenue', 'time_on_page']
            available_columns = [col for col in display_columns if col in df.columns]
            
            st.dataframe(
                df[available_columns].head(100),
                use_container_width=True,
                height=400
            )
    except Exception as e:
        st.error(f"Error loading sample data: {str(e)}")

def generate_preview():
    """Generate preview data based on current segment definition"""
    try:
        # Check if segment has containers
        if not st.session_state.segment_definition.get('containers'):
            st.warning("No segment conditions defined. Showing sample data.")
            show_sample_data()
            return
        
        # Build SQL query from segment definition
        sql_query = build_sql_from_segment(st.session_state.segment_definition)
        
        # Add limit based on sample size
        sample_size = st.session_state.get('preview_sample_size', 500)
        if sample_size != "All":
            sql_query = f"{sql_query} LIMIT {sample_size}"
        
        # Execute query
        df = execute_segment_query(sql_query)
        
        # Store in session state
        st.session_state.preview_data = df
        
        if df.empty:
            st.warning("No data matches the current segment definition")
        else:
            st.success(f"Preview generated: {len(df):,} records found")
        
    except Exception as e:
        st.error(f"Error generating preview: {str(e)}")
        st.session_state.preview_data = pd.DataFrame()

def render_preview_results():
    """Render the preview results with visualizations"""
    df = st.session_state.preview_data
    
    if df.empty:
        st.warning("No data matches the current segment definition")
        return
    
    # Summary metrics
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "Total Hits",
            f"{len(df):,}",
            f"{(len(df) / 1000000 * 100):.1f}% of total"
        )
    
    with col2:
        unique_sessions = df['session_id'].nunique() if 'session_id' in df.columns else 0
        st.metric(
            "Unique Sessions",
            f"{unique_sessions:,}",
            f"{(unique_sessions / 100000 * 100):.1f}% of total"
        )
    
    with col3:
        unique_visitors = df['user_id'].nunique() if 'user_id' in df.columns else 0
        st.metric(
            "Unique Visitors",
            f"{unique_visitors:,}",
            f"{(unique_visitors / 50000 * 100):.1f}% of total"
        )
    
    with col4:
        avg_revenue = df['revenue'].mean() if 'revenue' in df.columns else 0
        st.metric(
            "Avg Revenue",
            f"${avg_revenue:.2f}",
            f"{((avg_revenue - 50) / 50 * 100):.1f}%"
        )
    
    # Tabs for different views
    tab1, tab2, tab3, tab4 = st.tabs(["📈 Trends", "📊 Distribution", "🗂️ Data Sample", "🔍 Analysis"])
    
    with tab1:
        render_trends_view(df)
    
    with tab2:
        render_distribution_view(df)
    
    with tab3:
        render_data_sample(df)
    
    with tab4:
        render_analysis_view(df)

def render_trends_view(df):
    """Render time-based trends"""
    if 'timestamp' in df.columns:
        # Group by day
        df['date'] = pd.to_datetime(df['timestamp']).dt.date
        daily_stats = df.groupby('date').agg({
            'hit_id': 'count',
            'user_id': 'nunique',
            'revenue': 'sum' if 'revenue' in df.columns else lambda x: 0
        }).reset_index()
        daily_stats.columns = ['Date', 'Hits', 'Unique Visitors', 'Revenue']
        
        # Line chart
        fig = go.Figure()
        
        fig.add_trace(go.Scatter(
            x=daily_stats['Date'],
            y=daily_stats['Hits'],
            mode='lines+markers',
            name='Hits',
            line=dict(color='#1473E6', width=2)
        ))
        
        fig.add_trace(go.Scatter(
            x=daily_stats['Date'],
            y=daily_stats['Unique Visitors'],
            mode='lines+markers',
            name='Unique Visitors',
            line=dict(color='#0D66D0', width=2),
            yaxis='y2'
        ))
        
        fig.update_layout(
            title="Segment Trends Over Time",
            xaxis_title="Date",
            yaxis_title="Hits",
            yaxis2=dict(
                title="Unique Visitors",
                overlaying='y',
                side='right'
            ),
            hovermode='x unified',
            height=400
        )
        
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.info("Timestamp data not available for trends analysis")

def render_distribution_view(df):
    """Render distribution charts"""
    col1, col2 = st.columns(2)
    
    with col1:
        # Browser distribution
        if 'browser_name' in df.columns:
            browser_dist = df['browser_name'].value_counts().head(5)
            fig = px.pie(
                values=browser_dist.values,
                names=browser_dist.index,
                title="Browser Distribution",
                color_discrete_sequence=px.colors.sequential.Blues_r
            )
            st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Device type distribution
        if 'device_type' in df.columns:
            device_dist = df['device_type'].value_counts()
            fig = px.bar(
                x=device_dist.index,
                y=device_dist.values,
                title="Device Type Distribution",
                color_discrete_sequence=['#1473E6']
            )
            fig.update_layout(showlegend=False)
            st.plotly_chart(fig, use_container_width=True)
    
    # Page type distribution
    if 'page_type' in df.columns:
        page_dist = df['page_type'].value_counts()
        fig = px.treemap(
            names=page_dist.index,
            parents=[""] * len(page_dist),
            values=page_dist.values,
            title="Page Type Distribution"
        )
        st.plotly_chart(fig, use_container_width=True)

def render_data_sample(df):
    """Render a sample of the data"""
    st.markdown("#### Data Sample")
    
    # Column selector
    available_columns = df.columns.tolist()
    selected_columns = st.multiselect(
        "Select columns to display",
        options=available_columns,
        default=available_columns[:8] if len(available_columns) > 8 else available_columns
    )
    
    # Sample size
    sample_size = st.slider(
        "Sample size",
        min_value=10,
        max_value=min(1000, len(df)),
        value=min(100, len(df)),
        step=10
    )
    
    # Display sample
    if selected_columns:
        sample_df = df[selected_columns].head(sample_size)
        st.dataframe(
            sample_df,
            use_container_width=True,
            height=400
        )
        
        # Download button
        csv = sample_df.to_csv(index=False)
        st.download_button(
            label="Download Sample as CSV",
            data=csv,
            file_name="segment_sample.csv",
            mime="text/csv"
        )

def render_analysis_view(df):
    """Render detailed analysis of the segment"""
    st.markdown("#### Segment Analysis")
    
    # Key insights
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**Top Pages**")
        if 'page_title' in df.columns:
            top_pages = df['page_title'].value_counts().head(10)
            for page, count in top_pages.items():
                st.markdown(f"- {page}: {count:,} ({count/len(df)*100:.1f}%)")
    
    with col2:
        st.markdown("**Top Traffic Sources**")
        if 'traffic_source' in df.columns:
            top_sources = df['traffic_source'].value_counts().head(10)
            for source, count in top_sources.items():
                st.markdown(f"- {source}: {count:,} ({count/len(df)*100:.1f}%)")
    
    # Conversion funnel
    if all(col in df.columns for col in ['page_type', 'user_id']):
        st.markdown("**Conversion Funnel**")
        funnel_data = []
        funnel_stages = ['Home', 'Category', 'Product', 'Checkout']
        
        for stage in funnel_stages:
            users_at_stage = df[df['page_type'] == stage]['user_id'].nunique()
            funnel_data.append({
                'Stage': stage,
                'Users': users_at_stage
            })
        
        funnel_df = pd.DataFrame(funnel_data)
        fig = px.funnel(
            funnel_df,
            x='Users',
            y='Stage',
            title="User Journey Funnel"
        )
        st.plotly_chart(fig, use_container_width=True)